disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c("Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw$plantiff <- gsub("\\ v. .*","", disputesRaw$case); disputesRaw$plantiff <- gsub(".* - ","", disputesRaw$plantiff)
country1 <- disputesRaw %>%
distinct(countryA) %>%
rename(label = countryA)
country2 <- disputesRaw %>%
distinct(countryB) %>%
rename(label = countryB)
nodes <- full_join(country1, country2, by = "label")
nodes <- nodes %>% rowid_to_column("id")
detach("package:plyr", unload=TRUE)
per_route <- disputesRaw %>%
group_by(countryA, countryB) %>%
summarise(weight = n()) %>%
ungroup()
edges <- per_route %>%
left_join(nodes, by = c("countryA" = "label")) %>%
rename(from = id)
edges <- edges %>%
left_join(nodes, by = c("countryB" = "label")) %>%
rename(to = id)
edges <- select(edges, from, to, weight)
BITs_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = T)
library(tidyverse); library(igraph); library(plyr)
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c("Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw$plantiff <- gsub("\\ v. .*","", disputesRaw$case); disputesRaw$plantiff <- gsub(".* - ","", disputesRaw$plantiff)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw$plantiff <- gsub("\\ v. .*","", disputesRaw$case); disputesRaw$plantiff <- gsub(".* - ","", disputesRaw$plantiff)
country1 <- disputesRaw %>%
distinct(countryA) %>%
rename(label = countryA)
country2 <- disputesRaw %>%
distinct(countryB) %>%
rename(label = countryB)
nodes <- full_join(country1, country2, by = "label")
nodes <- nodes %>% rowid_to_column("id")
library(tidyverse); library(igraph); library(plyr)
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
detach("package:plyr", unload=TRUE)
disputesRaw$plantiff <- gsub("\\ v. .*","", disputesRaw$case); disputesRaw$plantiff <- gsub(".* - ","", disputesRaw$plantiff)
country1 <- disputesRaw %>%
distinct(countryA) %>%
rename(label = countryA)
country2 <- disputesRaw %>%
distinct(countryB) %>%
rename(label = countryB)
nodes <- full_join(country1, country2, by = "label")
nodes <- nodes %>% rowid_to_column("id")
per_route <- disputesRaw %>%
group_by(countryA, countryB) %>%
summarise(weight = n()) %>%
ungroup()
edges <- per_route %>%
left_join(nodes, by = c("countryA" = "label")) %>%
rename(from = id)
edges <- edges %>%
left_join(nodes, by = c("countryB" = "label")) %>%
rename(to = id)
edges <- select(edges, from, to, weight)
BITs_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = T)
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=.1,                           # Arrow size, defaults to 1
edge.arrow.width=.1,
vertex.shape="circle",
label.pos=5) # change edge color to grey
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c("Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
library(tidyverse); library(igraph); library(plyr)
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c("Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
detach("package:plyr", unload=TRUE)
disputesRaw$plantiff <- gsub("\\ v. .*","", disputesRaw$case); disputesRaw$plantiff <- gsub(".* - ","", disputesRaw$plantiff)
detach("package:plyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
library(tidyverse); library(igraph); library(plyr)
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c("Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw$countryA
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw$countryA
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia",
" Kyrgyz Republic (Kyrgyzstan)" = "Kyrgyzstan"))
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
detach("package:plyr", unload=TRUE)
disputesRaw$plantiff <- gsub("\\ v. .*","", disputesRaw$case); disputesRaw$plantiff <- gsub(".* - ","", disputesRaw$plantiff)
country1 <- disputesRaw %>%
distinct(countryA) %>%
rename(label = countryA)
country2 <- disputesRaw %>%
distinct(countryB) %>%
rename(label = countryB)
nodes <- full_join(country1, country2, by = "label")
nodes <- nodes %>% rowid_to_column("id")
per_route <- disputesRaw %>%
group_by(countryA, countryB) %>%
summarise(weight = n()) %>%
ungroup()
edges <- per_route %>%
left_join(nodes, by = c("countryA" = "label")) %>%
rename(from = id)
edges <- edges %>%
left_join(nodes, by = c("countryB" = "label")) %>%
rename(to = id)
edges <- select(edges, from, to, weight)
BITs_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = T)
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=.1,                           # Arrow size, defaults to 1
edge.arrow.width=.1,
vertex.shape="circle",
label.pos=5) # change edge color to grey
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia",
" Kyrgyz Republic (Kyrgyzstan)" = "Kyrgyzstan"))
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c("CzechRepublic" = "Czech Republic"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
library(tidyverse); library(igraph); library(plyr)
# load data
disputesRaw <- read.csv("/Users/jeffziegler/Dropbox/Research/data/disputes.csv", sep="\t", stringsAsFactors = F)
# create variables
disputesRaw <- disputesRaw[which(disputesRaw$treaty!="CHECK!"),]
disputesRaw$startDate <- gsub("\\ BIT.*","", disputesRaw$treaty)
disputesRaw$date <- gsub("[^0-9\\-]","", disputesRaw$date)
disputesRaw$countryA <- gsub("\\ - .*","", disputesRaw$startDate)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c(" Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia",
" Kyrgyz Republic (Kyrgyzstan)" = "Kyrgyzstan"))
disputesRaw$countryA <- gsub(" ","", disputesRaw$countryA)
disputesRaw$countryA <- revalue(disputesRaw$countryA, c("CzechRepublic" = "Czech Republic"))
disputesRaw <- disputesRaw[which(disputesRaw$countryA!=""),]
disputesRaw$countryB <- gsub(".* - ","", disputesRaw$startDate)
disputesRaw$countryB <- revalue(disputesRaw$countryB, c("Czechslovakia (Czech Republic and Slovak Republic)" = "Czechslovakia",
"Czech and Slovak Federal Republic (Czech Republic and Slovak Republic)" = "Czechslovakia"))
detach("package:plyr", unload=TRUE)
disputesRaw$plantiff <- gsub("\\ v. .*","", disputesRaw$case); disputesRaw$plantiff <- gsub(".* - ","", disputesRaw$plantiff)
country1 <- disputesRaw %>%
distinct(countryA) %>%
rename(label = countryA)
country2 <- disputesRaw %>%
distinct(countryB) %>%
rename(label = countryB)
nodes <- full_join(country1, country2, by = "label")
nodes <- nodes %>% rowid_to_column("id")
per_route <- disputesRaw %>%
group_by(countryA, countryB) %>%
summarise(weight = n()) %>%
ungroup()
edges <- per_route %>%
left_join(nodes, by = c("countryA" = "label")) %>%
rename(from = id)
edges <- edges %>%
left_join(nodes, by = c("countryB" = "label")) %>%
rename(to = id)
edges <- select(edges, from, to, weight)
BITs_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = T)
# create new function for opposite of %in%
'%!in%' <- function(x,y)!('%in%'(x,y))
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=.1,                           # Arrow size, defaults to 1
edge.arrow.width=.1,
vertex.shape="circle",
label.pos=5) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.1,
vertex.shape="circle",
label.pos=5) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=1,
vertex.shape="circle",
label.pos=5) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.5,
vertex.shape="circle",
label.pos=5) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout="circle") # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=layout_(make_ring(10) + make_full_graph(5), as_star())) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=layout_(make_ring(50) + make_full_graph(5), as_star())) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=layout_(make_ring(70) + make_full_graph(5), as_star())) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=layout_with_fr) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=norm_coords(layout_with_fr, ymin=-1, ymax=1, xmin=-1, xmax=1)) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=norm_coords(layout_with_fr(BITs_igraph), ymin=-1, ymax=1, xmin=-1, xmax=1)) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=norm_coords(layout_with_fr(BITs_igraph), ymin=-1, ymax=1, xmin=-1, xmax=1)*1) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=norm_coords(layout_with_fr(BITs_igraph), ymin=-1, ymax=1, xmin=-1, xmax=1)*2) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=norm_coords(layout_with_fr(BITs_igraph), ymin=-1, ymax=1, xmin=-1, xmax=1)*5) # change edge color to grey
plot(BITs_igraph,
#vertex.color = V(nigeriaPlot)$color, # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.5, # add a 25% curve to the edges
edge.color="grey20",
edge.arrow.size=1,                           # Arrow size, defaults to 1
edge.arrow.width=.25,
vertex.shape="circle",
label.pos=5, layout=norm_coords(layout_with_fr(BITs_igraph), ymin=-2, ymax=2, xmin=-2, xmax=2)*5) # change edge color to grey
rm(list=ls())
# set working directory to Git location
setwd('/Users/jeffziegler/Documents/Git/network2018_hw1/')
# load data
load("nigeria.rda")
# create variable for row and column length of adjacency matrix to fill
rowLength <- length(unique(nigeria$sender))
colLength <- length(unique(nigeria$receiver))
# create adjacency matrix of sender and receiver, filled w/ zeroes
nigeriaAdjMat <- matrix(0, nrow=rowLength, ncol=colLength)
# adjust row and column names for sender and receiver
rownames(nigeriaAdjMat) <- unique(nigeria$sender)
colnames(nigeriaAdjMat) <- unique(nigeria$receiver)
# fill in adjacency matrix per year (i)
# start by sorting all unique years to iterate over
nigeriaAdjMatYearlyList  <- lapply(sort(unique(nigeria$year)), function(i){
# find just those pairings for (1) a given year
currentYear <- nigeria[nigeria$year == i,]
# and (2) had a conflict (conflict == 1)
yearlyConflicts <- currentYear[currentYear$conflict == 1,]
# now that we know which pairings had conflicts
# fill in a "1" based on sender and receiver
for(i in 1:nrow(yearlyConflicts)){
nigeriaAdjMat[as.character(yearlyConflicts[i,]$sender),
as.character(yearlyConflicts[i,]$receiver)] <- 1
}
# return the adjacency matrix, which will be placed in a list
return(nigeriaAdjMat)
})
# collapse all the matrices in list into one matrix
# since instructions are to "summarize the interactions
# across all time periods into a single matrix"
nigeriaAdjMatTotalMatrix <- Reduce('+', nigeriaAdjMatYearlyList)
# (a) Run a cross-sectional ERGM on the Nigerian conflict network
# H1: First order (edges: Some actors (like the gov't) are engaged in conflict a lot)
# H2: Second order (mutual: Reciprocity should be high)
# H3: Third order (triangle: Allies exist in the network (police, military), transitivity might be high?)
# include geometrically weighted terms
#diag(nigeriaAdjMatTotalMatrix) <- NA
library(statnet)
ERGMmodel <- ergm(as.network.matrix(nigeriaAdjMatTotalMatrix) ~ edges +
mutual + triangle)
nigeriaAdjMatTotalMatrix
# first, recreate matrices so that they are network objects
library(network)
nigeriaAdjMatNetworkList  <- lapply(sort(unique(nigeria$year)), function(i){
# find just those pairings for (1) a given year
currentYear <- nigeria[nigeria$year == i,]
# and (2) had a conflict (conflict == 1)
yearlyConflicts <- currentYear[currentYear$conflict == 1,]
# now that we know which pairings had conflicts
# fill in a "1" based on sender and receiver
for(i in 1:nrow(yearlyConflicts)){
nigeriaAdjMat[as.character(yearlyConflicts[i,]$sender),
as.character(yearlyConflicts[i,]$receiver)] <- 1
}
# return the adjacency matrix, which will be placed in a list
return(as.network.matrix(nigeriaAdjMat))
})
nigeriaAdjMatNetworkList
nigeriaAdjMatNetworkList[[1]]
nigeriaAdjMatNetworkList[[2]]
as.network.matrix(nigeriaAdjMatTotalMatrix)
# (a) Run a cross-sectional ERGM on the Nigerian conflict network
# H1: First order (edges: Some actors (like the gov't) are engaged in conflict a lot)
# H2: Second order (mutual: Reciprocity should be high)
# H3: Third order (triangle: Allies exist in the network (police, military), transitivity might be high?)
# include geometrically weighted terms
#diag(nigeriaAdjMatTotalMatrix) <- NA
library(statnet)
ERGMmodel <- ergm(as.network.matrix(nigeriaAdjMatTotalMatrix) ~ edges +
mutual + triangle)
ERGMmodel <- ergm(as.network.matrix(nigeriaAdjMatTotalMatrix) ~ edges +
mutual)
# (b) results
summary(ERGMmodel)
# (c) check for convergence
mcmc.diagnostics(ERGMmodel)
ERGMmodel <- ergm(as.network.matrix(nigeriaAdjMatTotalMatrix) ~ edges +
mutual + idegree1.5)
# (b) results
# reciprocity is high (when one actor is attacked, they retaliate)
summary(ERGMmodel)
ERGMmodel <- ergm(as.network.matrix(nigeriaAdjMatTotalMatrix) ~ edges +
mutual + idegree1.5)
ERGMmodel <- ergm(as.network.matrix(nigeriaAdjMatTotalMatrix) ~ edges +
mutual)
# (b) results
# reciprocity is high (when one actor is attacked, they retaliate)
summary(ERGMmodel)
# (c) check for convergence
mcmc.diagnostics(ERGMmodel)
